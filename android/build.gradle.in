buildscript {
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.5.3'
	}
}
allprojects {
	repositories {
		google()
		jcenter()
	}
}

apply plugin: 'com.android.application'

android {
	buildToolsVersion "@GRADLE_BUILDTOOLS_VERSION@"
	compileSdkVersion @GRADLE_COMPILESDK_VERSION@

	defaultConfig {
		minSdkVersion @GRADLE_MINSDK_VERSION@
		targetSdkVersion @GRADLE_TARGETSDK_VERSION@
		versionCode @GRADLE_VERSIONCODE@
		versionName "@GRADLE_VERSION@"
	}

	buildTypes {
		release {
			minifyEnabled true
			shrinkResources true
		}

		debug {
			applicationIdSuffix ".debug"
		}
	}

	splits {
		abi {
			enable true
			reset()
			include '@GRADLE_NDK_ARCHITECTURES@'
			universalApk false
		}
	}

	final def cmakeBuildDir = new File(project.buildDir, "@PACKAGE_LOWER_NAME@")
	final def architectures = ['@GRADLE_NDK_ARCHITECTURES@']
	final def libcppIsShared = @GRADLE_LIBCPP_SHARED@

	def androidPlatform = @GRADLE_MINSDK_VERSION@
	while (file("$ndkDir/platforms/android-" + androidPlatform.toString()).exists() == false && androidPlatform > 0)
		androidPlatform -= 1

	def cmakeBuildTasks = []
	for (arch in architectures) {
		final def archDir = new File(cmakeBuildDir, arch)
		def cmakeBuildDependsTasks = []

		if (arch == "armeabi-v7a")
			androidPlatform = androidPlatform >= 16 ? androidPlatform : 16
		else if (arch == "arm64-v8a")
			androidPlatform = androidPlatform >= 21 ? androidPlatform : 21
		else if (arch == "x86_64")
			androidPlatform = androidPlatform >= 21 ? androidPlatform : 21

		if (libcppIsShared) {
			tasks.create(name:'libcppCopy_' + arch, type: Exec, dependsOn: 'cmakeConfigure_' + arch) {
				commandLine cmakeCommand, '-E', 'copy_if_different', ndkDir + '/sources/cxx-stl/llvm-libc++/libs/' + arch + '/libc++_shared.so', archDir.path
			}
			cmakeBuildDependsTasks.add('libcppCopy_' + arch)
		}

		tasks.create(name:'cmakeConfigure_' + arch, type: Exec) {
			commandLine cmakeCommand, '-H' + file('src/main/cpp').absolutePath, '-B' + archDir, '-DCMAKE_TOOLCHAIN_FILE=' + ndkDir + '/build/cmake/android.toolchain.cmake', '-DANDROID_PLATFORM=android-' + androidPlatform.toString(), '-DANDROID_ABI=' + arch, '@GRADLE_PASSTHROUGH_ARGS@', '@GRADLE_CMAKE_ARGS@'

			if (arch == "armeabi-v7a")
				commandLine += ['@GRADLE_ARM_ARGS@']
		}
		cmakeBuildDependsTasks.add('cmakeConfigure_' + arch)

		tasks.create(name:'cmakeBuild_' + arch, type: Exec, dependsOn: cmakeBuildDependsTasks) {
			commandLine cmakeCommand, '--build', archDir
		}
		cmakeBuildTasks.add('cmakeBuild_' + arch)
	}

	sourceSets.main {
		jniLibs.srcDirs = [cmakeBuildDir, @GRADLE_JNILIBS_DIRS@]
		jni.srcDirs = [] // disable automatic ndk-build call
	}

	tasks.withType(JavaCompile) {
		compileTask -> compileTask.dependsOn cmakeBuildTasks
	}

	clean {
		delete cmakeBuildDir
	}
}
